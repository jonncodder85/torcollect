// Generated by CoffeeScript 1.6.3
(function() {
  var add_dot, data, delay, generate_dots, generate_reportlink, get_attribute_array, get_date_array, get_dot_radius, get_nth_key, get_point, get_point_string, get_points, get_user_array, get_x_position, get_y_position, graph_height, graph_width, initialize_graph, keys, load_day_report, load_most_recent, m_generate_received_polygon, m_generate_sent_polygon, m_generate_traffic_gradient, m_generate_traffic_graph, m_generate_traffic_graphs, m_get_left, m_get_point, m_get_points, m_get_top, m_get_x_position, m_get_y_position, m_graph_height, m_graph_width, m_x_space_between_points, m_y_space_between_points, maxim, values, x_space_between_points, y_space_between_points,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  data = graphdata;

  get_dot_radius = function() {
    return 5;
  };

  graph_width = function() {
    return document.getElementById("graphspace").clientWidth - 20;
  };

  x_space_between_points = function() {
    return graph_width() / (data.length - 1);
  };

  get_x_position = function(count) {
    return Math.round(count * x_space_between_points());
  };

  y_space_between_points = function() {
    return (graph_height() - get_dot_radius() * 2) / maxim(get_user_array(data));
  };

  get_y_position = function(value) {
    return Math.round(graph_height() - value * y_space_between_points() + get_dot_radius());
  };

  graph_height = function() {
    return 100;
  };

  get_point = function(value, count) {
    return [get_x_position(count), get_y_position(value)];
  };

  get_point_string = function(value, count) {
    return get_point(value, count)[0] + "," + get_point(value, count)[1];
  };

  maxim = function(data, i) {
    if (i == null) {
      i = 0;
    }
    if (i + 1 === data.length) {
      return Math.max(-Infinity, data[i]);
    } else {
      return Math.max(data[i], maxim(data, i + 1));
    }
  };

  values = function(dictionary) {
    var k, v, _results;
    _results = [];
    for (k in dictionary) {
      v = dictionary[k];
      _results.push(v);
    }
    return _results;
  };

  keys = function(dictionary) {
    var k, v, _results;
    _results = [];
    for (k in dictionary) {
      v = dictionary[k];
      _results.push(k);
    }
    return _results;
  };

  delay = function(time, f) {
    return setTimeout(f, time);
  };

  get_user_array = function(data) {
    var set, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      set = data[_i];
      _results.push(set['u']);
    }
    return _results;
  };

  get_date_array = function(data) {
    var set, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      set = data[_i];
      _results.push(set['d']);
    }
    return _results;
  };

  get_attribute_array = function(data, attributes) {
    var attribute, set;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = attributes.length; _i < _len; _i++) {
        attribute = attributes[_i];
        _results.push((function() {
          var _j, _len1, _results1;
          _results1 = [];
          for (_j = 0, _len1 = data.length; _j < _len1; _j++) {
            set = data[_j];
            _results1.push(set[attribute]);
          }
          return _results1;
        })());
      }
      return _results;
    })()).reduce(function(x, y) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = x.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(x[i] + y[i]);
      }
      return _results;
    });
  };

  get_points = function(data, area) {
    var i, points;
    if (area == null) {
      area = true;
    }
    points = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(get_point_string(data[i], i));
      }
      return _results;
    })();
    if (area) {
      points.unshift(0 + "," + graph_height());
      points.push(graph_width() + "," + graph_height());
    }
    return points.join(" ");
  };

  get_nth_key = function(n) {
    return 1;
  };

  generate_reportlink = function(day) {
    return function() {
      return load_day_report(day);
    };
  };

  add_dot = function(svg, count, data) {
    var circle;
    circle = document.createElementNS(svg.namespaceURI, 'circle');
    circle.setAttribute("cx", get_x_position(count));
    circle.setAttribute("cy", get_y_position(data['u']));
    circle.setAttribute("r", get_dot_radius());
    circle.setAttribute("stroke", "#aaff00");
    circle.setAttribute("stroke-width", 1);
    circle.setAttribute("fill", "#111");
    circle.onclick = generate_reportlink(data['d']);
    return svg.appendChild(circle);
  };

  generate_dots = function(svg, data) {
    var i, _i, _ref, _results;
    _results = [];
    for (i = _i = 0, _ref = data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(add_dot(svg, i, data[i]));
    }
    return _results;
  };

  initialize_graph = function() {
    var polygon, sns, svg, vals;
    vals = get_user_array(data);
    svg = document.getElementById('tc_graph');
    svg.setAttribute('width', graph_width());
    sns = svg.namespaceURI;
    polygon = document.createElementNS(sns, 'polygon');
    polygon.setAttribute("points", get_points(vals));
    polygon.setAttribute("fill", "url(#grad1)");
    svg.appendChild(polygon);
    return generate_dots(svg, data);
  };

  load_day_report = function(day) {
    var req, url;
    if (typeof this.XMLHttpRequest === "undefined") {
      console.log('XMLHttpRequestis undefined');
      this.XMLHttpRequest = function() {
        var error;
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (_error) {
          error = _error;
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        } catch (_error) {
          error = _error;
        }
        try {
          return new ActiveXObject("Microsoft.XMLHTTP");
        } catch (_error) {
          error = _error;
        }
        throw new Error("This browser does not support XMLHttpRequest.");
      };
    }
    req = new XMLHttpRequest();
    req.addEventListener('readystatechange', function() {
      var json_req, success_resultcodes, url, _ref;
      if (req.readyState === 4) {
        success_resultcodes = [200, 304];
        if (_ref = req.status, __indexOf.call(success_resultcodes, _ref) >= 0) {
          document.getElementById('reportcontent').innerHTML = req.responseText;
          json_req = new XMLHttpRequest();
          json_req.addEventListener('readystatechange', function() {
            var incoming_data, _ref1;
            if (json_req.readyState === 4) {
              success_resultcodes = [200, 304];
              if (_ref1 = json_req.status, __indexOf.call(success_resultcodes, _ref1) >= 0) {
                incoming_data = JSON.parse(json_req.responseText);
                return m_generate_traffic_graphs(incoming_data["traffic_history"]);
              }
            }
          });
          url = '/reports/' + req.day + '.json';
          json_req.open('GET', url, true);
          return json_req.send(null);
        }
      }
    });
    url = '/reports/' + day + '.html';
    req.day = day;
    req.open('GET', url, true);
    return req.send(null);
  };

  load_most_recent = function(data) {
    return load_day_report(get_date_array(data)[data.length - 1]);
  };

  initialize_graph(data);

  load_most_recent(data);

  m_graph_width = function(id) {
    return document.getElementById(id).offsetWidth;
  };

  m_graph_height = function(id) {
    return document.getElementById(id).offsetHeight - 1;
  };

  m_x_space_between_points = function(id, data) {
    return m_graph_width(id) / (data.length - 1);
  };

  m_y_space_between_points = function(id, data, attributes) {
    return (m_graph_height(id) - get_dot_radius() * 2) / maxim(get_attribute_array(data, attributes));
  };

  m_get_x_position = function(id, data, count) {
    return Math.round(count * m_x_space_between_points(id, data));
  };

  m_get_y_position = function(id, data, attributes, value) {
    if (value == null) {
      value = 0;
    }
    return Math.round(m_graph_height(id) - value * m_y_space_between_points(id, data, attributes) + get_dot_radius());
  };

  m_get_point = function(id, data, abs_attributes, value, count) {
    return m_get_x_position(id, data, count) + "," + m_get_y_position(id, data, abs_attributes, value);
  };

  m_get_points = function(id, data, attribute, abs_attributes, area) {
    var i, points;
    if (area == null) {
      area = true;
    }
    points = (function() {
      var _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = data.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(m_get_point(id, data, abs_attributes, get_attribute_array(data, attribute)[i], i));
      }
      return _results;
    })();
    if (area) {
      points.unshift(0 + "," + m_graph_height(id));
      points.push(m_graph_width(id) + "," + m_graph_height(id));
    }
    return points.join(" ");
  };

  m_generate_received_polygon = function(id, traffic_data) {
    var polygon, svg_ns;
    svg_ns = "http://www.w3.org/2000/svg";
    polygon = document.createElementNS(svg_ns, 'polygon');
    polygon.setAttribute('points', m_get_points(id, traffic_data, ['s', 'r'], ['r', 's']));
    polygon.setAttribute('fill', 'url(#grad3)');
    return polygon;
  };

  m_generate_sent_polygon = function(id, traffic_data) {
    var polygon, svg_ns;
    svg_ns = "http://www.w3.org/2000/svg";
    polygon = document.createElementNS(svg_ns, 'polygon');
    polygon.setAttribute('points', m_get_points(id, traffic_data, 's', ['r', 's']));
    polygon.setAttribute('fill', "url(#grad2)");
    return polygon;
  };

  m_get_left = function(element) {
    if (element.tagName === "DIV") {
      return element.offsetLeft - 2;
    } else {
      return m_get_left(element.parentNode) + element.offsetLeft;
    }
  };

  m_get_top = function(element) {
    if (element.tagName === "DIV") {
      return element.offsetTop - 2;
    } else {
      return m_get_top(element.parentNode) + element.offsetTop;
    }
  };

  m_generate_traffic_gradient = function() {
    var defs, grad, grad2, s1, s2, s3, s4, svg_ns;
    svg_ns = "http://www.w3.org/2000/svg";
    defs = document.createElementNS(svg_ns, 'defs');
    grad = document.createElementNS(svg_ns, 'linearGradient');
    grad.setAttribute('id', 'grad3');
    grad.setAttribute('y2', '100%');
    grad.setAttribute('x2', '0%');
    grad.setAttribute('y1', '0%');
    grad.setAttribute('x1', '0%');
    s1 = document.createElementNS(svg_ns, 'stop');
    s1.style.stopColor = '#00f';
    s1.style.stopOpacity = "0.25";
    s1.setAttribute('offset', '0%');
    s2 = document.createElementNS(svg_ns, 'stop');
    s2.style.stopColor = '#00f';
    s2.style.stopOpacity = "0.1";
    s2.setAttribute('offset', '100%');
    grad.appendChild(s1);
    grad.appendChild(s2);
    defs.appendChild(grad);
    grad2 = document.createElementNS(svg_ns, 'linearGradient');
    grad2.setAttribute('id', 'grad2');
    grad2.setAttribute('y2', '100%');
    grad2.setAttribute('x2', '0%');
    grad2.setAttribute('y1', '0%');
    grad2.setAttribute('x1', '0%');
    s3 = document.createElementNS(svg_ns, 'stop');
    s3.style.stopColor = '#f00';
    s3.style.stopOpacity = "0.25";
    s3.setAttribute('offset', '0%');
    s4 = document.createElementNS(svg_ns, 'stop');
    s4.style.stopColor = 'f00';
    s4.style.stopOpacity = "0.1";
    s4.setAttribute('offset', '100%');
    grad2.appendChild(s3);
    grad2.appendChild(s4);
    defs.appendChild(grad2);
    return defs;
  };

  m_generate_traffic_graph = function(id, brg_traffic_data) {
    var svg, svg_ns, tr, traffic_data;
    svg_ns = "http://www.w3.org/2000/svg";
    svg = document.createElementNS(svg_ns, 'svg');
    tr = document.getElementById(id);
    svg.setAttribute('width', tr.offsetWidth - 1);
    svg.setAttribute('height', tr.offsetHeight - 1);
    traffic_data = brg_traffic_data[id.split("_")[1].toString()];
    svg.appendChild(m_generate_traffic_gradient());
    svg.appendChild(m_generate_received_polygon(id, traffic_data));
    svg.appendChild(m_generate_sent_polygon(id, traffic_data));
    document.body.appendChild(svg);
    svg.style.display = "block";
    svg.style.position = "absolute";
    svg.style.top = m_get_top(tr) + "px";
    svg.style.left = m_get_left(tr) + "px";
    return svg.style.zIndex = 0;
  };

  m_generate_traffic_graphs = function(brg_traffic_data) {
    var id, _i, _len, _ref, _results;
    _ref = keys(brg_traffic_data);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      id = _ref[_i];
      _results.push(m_generate_traffic_graph("brgl_" + id, brg_traffic_data));
    }
    return _results;
  };

}).call(this);
